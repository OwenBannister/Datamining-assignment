 
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;


public class ImageProcessor{
	 BufferedImage bufferedImage;
	 int[][] image;
	 int[][] sobel_x = new int[][]{{-1,0,1},{-2,0,2}, {-1,0,1}};
	 int[][] sobel_y = new int[][]{{1,2,1},{0,0,0}, {-1,-2,-1}};

	 public ImageProcessor() throws IOException{
		 try{
		File file = new File("images/test-pattern.png");
		//	 File file = new File("images/engine.png");
			System.out.println(file);
		 bufferedImage = ImageIO.read(file);
		 System.out.println(bufferedImage);
		 image = convertTo2D(bufferedImage);
		 sobelEdgeDetect();
		 }
		 catch(IOException e){e.printStackTrace();}
	 }


	 public void sobelEdgeDetect(){
		 int pixelX = 0;
		 int pixelY = 0;
		 int val = 0;
		 for (int x = 2;x<image.length-2;x++){
			 for (int y = 2;y<image[0].length-2;y++){
				pixelX = (sobel_x[0][0] * pixelAt(x-1,y-1)) + (sobel_x[0][1] * pixelAt(x,y-1)) + (sobel_x[0][2] * pixelAt(x+1,y-1)) +
			              (sobel_x[1][0] * pixelAt(x-1,y))   + (sobel_x[1][1] * pixelAt(x,y))   + (sobel_x[1][2] * pixelAt(x+1,y)) +
			              (sobel_x[2][0] * pixelAt(x-1,y+1)) + (sobel_x[2][1] * pixelAt(x,y+1)) + (sobel_x[2][2] * pixelAt(x+1,y+1));

			    pixelY = (sobel_y[0][0] * pixelAt(x-1,y-1)) + (sobel_y[0][1] * pixelAt(x,y-1)) + (sobel_y[0][2] * pixelAt(x+1,y-1)) +
			              (sobel_y[1][0] * pixelAt(x-1,y))   + (sobel_y[1][1] * pixelAt(x,y))   + (sobel_y[1][2] * pixelAt(x+1,y)) +
			              (sobel_y[2][0] * pixelAt(x-1,y+1)) + (sobel_y[2][1] * pixelAt(x,y+1)) + (sobel_y[2][2] * pixelAt(x+1,y+1));

			    val = (int) Math.sqrt((pixelX * pixelX) + Math.abs(pixelY * pixelY));

			    System.out.println(val);
			    if (val < 0) {
			    	val = 0;
                } else if (val > 255) {
                	val = 255;
                }
			    val = 255 - val;

			    image[x][y] = val;
			 }
		 }
		 outputToFile();
	 }

	 private int pixelAt(int x, int y){
		return image[x][y];
	 }

	 private int[][] convertTo2D(BufferedImage image) {
		 System.out.println(image);
	      int width = image.getWidth();
	      int height = image.getHeight();
	      int[][] result = new int[height][width];

	      for (int row = 0; row < height; row++) {
	         for (int col = 0; col < width; col++) {
	            result[row][col] = image.getRGB(col, row);
	           // System.out.print(" "+ image.getRGB(col, row));
	         }
	        // System.out.println();
	      }
	      return result;
	   }
	 private void outputToFile(){
		 try {
			 BufferedImage returnImage = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getWidth(), BufferedImage.TYPE_INT_RGB);
			 for (int x = 2;x<image.length-2;x++){
				 for (int y = 2;y<image[0].length-2;y++){
					 returnImage.setRGB(y, x, pixelAt(x,y));
					 //System.out.print(" "+pixelAt(x,y));
				 }
				// System.out.println();
				 }

			    File outputfile = new File("saved.png");
			    ImageIO.write(returnImage, "png", outputfile);
			} catch (IOException e) {}

	 }


	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException{
		ImageProcessor main = new ImageProcessor();
	}


}
